{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","window","onload","self","this","addEventListener","event","registration","showNotification","body","tag","vibrate","data","dateOfArrival","Date","now","primaryKey","actions","action","title","icon","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","Notification","requestPermission","result"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,8KCyB5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCDRC,OAAOC,OAAO,WACd,IAAIC,EAAOC,KACXD,EAAKE,iBAAiB,QAAQ,SAAAC,GAC5BH,EAAKI,aAAaC,iBAAiB,mBAAoB,CACrDC,KAAM,cACNC,IAAK,mBACLC,QAAS,CAAC,IAAK,GAAI,KACnBC,KAAM,CACJC,cAAeC,KAAKC,MACpBC,WAAY,GAEdC,QAAS,CACP,CACEC,OAAQ,UACRC,MAAO,yBACPC,KAAM,wBAER,CACEF,OAAQ,QACRC,MAAO,qBACPC,KAAM,2BAMd,IAAMC,EAAcC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAzB,GACJA,EAAa0B,cAAgB,WAC3B,IAAMC,EAAmB3B,EAAa4B,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASlC,KAMlBgC,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUnC,WAO5BoC,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCnHjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyC1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,cAAwBjD,OAAOsB,SAASzB,MACpDqD,SAAWlD,OAAOsB,SAAS4B,OAIvC,OAGFlD,OAAOI,iBAAiB,QAAQ,WAC9B,IAAMsB,EAAK,UAAMuB,cAAN,sBAEP7B,IAgEV,SAAiCM,EAAOC,GAEtCwB,MAAMzB,GACHK,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAzB,GACjCA,EAAaqD,aAAa5B,MAAK,WAC7B/B,OAAOsB,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OChE/BE,GACAiC,aAAaC,mBAAkB,SAAAC,GACd,YAAXA,GAEE,iBAAkBhE,QACpB4B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAzB,GACjCA,EAAaC,iBAAiB,mBAAoB,CAChDC,KAAM,cACNC,IAAK,mBACVC,QAAS,CAAC,IAAK,GAAI,KACnBC,KAAM,CACLC,cAAeC,KAAKC,MACpBC,WAAY,GAEbC,QAAS,CACR,CACCC,OAAQ,UACRC,MAAO,yBACPC,KAAM,wBAEP,CACCF,OAAQ,QACRC,MAAO,qBACPC,KAAM,+B","file":"static/js/main.9c2d122c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nwindow.onload=function(){\nvar self = this;\nself.addEventListener('push', event => {\n  self.registration.showNotification('Vibration Sample', {\n    body: 'Buzz! Buzz!',\n    tag: 'vibration-sample',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'Explore this new world',\n        icon: 'images/checkmark.png'\n      },\n      {\n        action: 'close',\n        title: 'Close notification',\n        icon: 'images/xmark.png'\n      },\n    ]\n  });\n});\n}\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\nNotification.requestPermission(result => {\n  if (result === 'granted') {\n\n    if ('Notification' in window) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.showNotification('Vibration Sample', {\n          body: 'Buzz! Buzz!',\n          tag: 'vibration-sample',\n\t\t\t\t\tvibrate: [100, 50, 100],\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdateOfArrival: Date.now(),\n\t\t\t\t\t\tprimaryKey: 1\n\t\t\t\t\t},\n\t\t\t\t\tactions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'explore',\n\t\t\t\t\t\t\ttitle: 'Explore this new world',\n\t\t\t\t\t\t\ticon: 'images/checkmark.png'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: 'close',\n\t\t\t\t\t\t\ttitle: 'Close notification',\n\t\t\t\t\t\t\ticon: 'images/xmark.png'\n\t\t\t\t\t\t},\n\t\t\t\t\t]\n        })\n      })\n    }\n\n  }\n})"],"sourceRoot":""}